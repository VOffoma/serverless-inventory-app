service:
  name: serverless-inventory-app
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  documentation:
    api:
      info:
        version: v1.0.0
        title: Inventory API
        description: Serverless application for managing inventory and orders
    models:
      - name: BulkProductsRequest
        contentType: application/json
        schema: ${file(models/bulk-create-products-request.json)}

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-2'}
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    PRODUCTS_TABLE: Products-${self:provider.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1


functions:
  GetProducts:
    handler: src/lambda/http/getProducts.handler
    events:
      - http:
          method: get
          path: products
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PRODUCTS_TABLE}

  BulkCreateProducts:
    handler: src/lambda/http/bulkCreateProducts.handler
    events:
      - http:
          method: post
          path: products/bulk
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Bulk create a list of products
            description: Bulk create a list of products
            requestModels:
              'application/json': BulkProductsRequest
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - dynamodb:BatchWriteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PRODUCTS_TABLE}

resources:
  Resources:

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
        
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    ProductsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties: 
        AttributeDefinitions:
          - AttributeName: productId
            AttributeType: S
        KeySchema:
          - AttributeName: productId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.PRODUCTS_TABLE}

